<!doctype html>
<html>
<head>
  <title>Spotify Playlist Editor</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="shortcut icon" href="/images/favicon.ico">
  <link rel="stylesheet" href="/stylesheets/main.css">
  <link href='https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=Raleway:800,900' rel='stylesheet' type='text/css'>
  <script type='text/javascript' src='scripts/notifIt.js'></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.1/handlebars.min.js"></script>
  <script src="https://code.jquery.com/jquery-1.10.1.min.js"></script>
  <script src="/scripts/Sortable.js"></script>
  <link rel='stylesheet' type='text/css' href='/stylesheets/notifIt.css'>


    <style type="text/css">
    #login, #loggedin {
      display: none;
    }
    .text-overflow {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      width: 500px;
    }
    </style>
  </head>

  <body  class="login">
    <div class="header">
      <div class="container">
        <div class="header-left">
          <img class="icon"  width="30" src="images/icon.png" />
          <span><a href="./">Spotify Playlist Editor</a></span>
        </div>
        <div class="header-right">
          <div id="user-profile">
          </div>
        </div>
      </div>
    </div>
    <div class="main-body">
      <div class="container">
        <div id="login">
          <h1>Welcome</h1>
          <p>The Spotify Playlist Editor lets you reorder the tracks in your existing Spotify playlists. Sign in to get started.</p>
          <a href="/login" class="btn btn-primary btn-login">Sign in with Spotify</a>
        </div>
        <div id="loggedin">

        </div>

        <div id="playlists">
        </div>
        <div id="tracks">
        </div>
      </div>
    </div>
  </body>
  <footer class="site-footer">
    <div class="container">
      Lovingly crafted by <a href="http://www.twitter.com/al1ra">@al1ra</a>
      <div>
      </footer>
      <script id="user-profile-template" type="text/x-handlebars-template">
        <!-- <span style="display:inline;">Logged in as  -->
        {{#if images}}
        <img class="profile-img" style="margin-right:5px;" width="30" src="{{images.0.url}}" />
        <!-- ///{{display_name}} </span> -->
        {{/if}}
      </script>

      <script id="playlists-template" type="text/x-handlebars-template">
        <h2>Playlists</h2>
        {{#if items}}
        <p>Select a playlist to view its tracks.</p>
        <ul id="playlistList" class="list-group">
          {{#each items}}
          <li id={{this.id}} data-value={{this.href}} class="list-group-item"><a href="#">{{this.name}}<a></li>
            {{/each}}
          </ul>
          {{else}}
          <p>No playlists found.</p>
          {{/if}}
        </script>


        <script id="tracks-template" type="text/x-handlebars-template">
          <div class="BackToPlaylistsButton">
            <a id="backToPlaylists" class="btn btn-primary">Back to My Playlists</a>
          </div>
          <h2>Tracks</h2>
          {{#if items}}
          <p>Reorder tracks using the handle at the right.</p>
          <ul id="trackList" class="list-group">
            {{#each items}}
            <li class="list-group-item">{{this.track.name}} <span class="artist"> {{this.track.artists.0.name}}<span><span class="drag-handle">â˜°</span></li>
              {{/each}}
            </ul>
            {{else}}
            <p>No tracks found.</p>
            {{/if}}
            {{#if previous}}
            <button id="previousbutton" type="button" class="btn btn-primary">Previous Page</button>
            {{/if}}
            {{#if next}}
            <button id="nextbutton" type="button" class="btn btn-primary">Next Page</button>
            {{/if}}


          </script>

          <script>
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('create', 'UA-64612068-1', 'auto');
            ga('send', 'pageview');

          </script>

          <script>

          (function() {

            /**
            * Obtains parameters from the hash of the URL
            * @return Object
            */
            function getHashParams() {
              var hashParams = {};
              var e, r = /([^&;=]+)=?([^&;]*)/g,
              q = window.location.hash.substring(1);
              while ( e = r.exec(q)) {
                hashParams[e[1]] = decodeURIComponent(e[2]);
              }
              return hashParams;
            }

            var userProfileSource = document.getElementById('user-profile-template').innerHTML,
            userProfileTemplate = Handlebars.compile(userProfileSource),
            userProfilePlaceholder = document.getElementById('user-profile');

            var playlistsSource = document.getElementById('playlists-template').innerHTML,
            playlistsTemplate = Handlebars.compile(playlistsSource),
            playlistsPlaceholder = document.getElementById('playlists');

            var tracksSource = document.getElementById('tracks-template').innerHTML,
            tracksTemplate = Handlebars.compile(tracksSource),
            tracksPlaceholder = document.getElementById('tracks');



            var params = getHashParams();

            var access_token = params.access_token,
            refresh_token = params.refresh_token,
            error = params.error;

            var selectedPlaylist;
            var userref;
            var currentOffset;
            var nextPageURL;
            var previousPageURL;

            function getTokens() {

              if (error) {
                alert('There was an error during the authentication');
              } else {
                if (access_token) {
                  $.ajax({
                    url: 'https://api.spotify.com/v1/me',
                    headers: {
                      'Authorization': 'Bearer ' + access_token
                    },
                    success: function(response) {

                      $('#login').hide();
                      $('body').removeClass();
                      $('#loggedin').show();
                      userProfilePlaceholder.innerHTML = userProfileTemplate(response);
                      userref = response.href;
                      listPlaylists(userref);
                    }
                  });
                } else {
                  // render initial screen
                  $('#login').show();
                  $('body').addClass('login');
                  $('#loggedin').hide();
                }
              }
            }

            $(window).bind('hashchange', function(e){
              if(window.location.hash != "#playlist")
              {
                getTokens();
              }

            });

            getTokens();


            // $(window).unload( function () {  });
            // $(window).on("navigate", function (event, data) {
            //   var direction = data.state.direction;
            //   if (direction == 'back') {
            //
            //   }
            //   if (direction == 'forward') {
            //     // do something else
            //   }
            //
            //
            function listPlaylists(userref) {
              $.ajax({
                url: userref + '/playlists',
                headers: {
                  'Authorization': 'Bearer ' + access_token
                },
                success: function(response) {
                  playlistsPlaceholder.innerHTML = playlistsTemplate(response);

                  $('#playlists').show();
                  $('#tracks').hide();

                }
              });
            }

            $('#playlists').on('click', 'li', function () {

              //selectedPlaylist = $( this ).attr('id');
              selectedPlaylist = $( this ).attr('data-value');
              $.ajax({

                //url: userref + '/playlists/' + $( this ).attr('id') + "/tracks",
                url: selectedPlaylist + "/tracks",
                headers: {
                  'Authorization': 'Bearer ' + access_token
                },
                success: function(response) {

                  tracksPlaceholder.innerHTML = tracksTemplate(response);
                  nextPageURL = response.next;
                  previousPageURL = response.previous;
                  currentOffset = response.offset;
                  if((response.items!= null) && (response.items.length > 0))
                  {
                  Sortable.create(trackList, {delay:0, handle: ".drag-handle", forceFallback: true,
                    onEnd: function (/**Event*/evt) {
                      moveItem(currentOffset,evt.oldIndex,evt.newIndex);
                    }
                  });
                }
                  $('#playlists').hide();
                  $('#tracks').show();

                }
              });
              event.preventDefault();
              window.location.hash = "#playlist"
            });



            $('#tracks').on('click', '#nextbutton', function () {
              $.ajax({
                url: nextPageURL,
                headers: {
                  'Authorization': 'Bearer ' + access_token
                },
                success: function(response) {

                  tracksPlaceholder.innerHTML = tracksTemplate(response);
                  nextPageURL = response.next;
                  previousPageURL = response.previous;
                  currentOffset = response.offset;
                  if((response.items!= null) && (response.items.length > 0))
                  {
                    Sortable.create(trackList, {delay:0, handle: ".drag-handle",
                      onEnd: function (/**Event*/evt) {
                        moveItem(currentOffset,evt.oldIndex,evt.newIndex);
                      }
                    });
                  }
                }
              });
              event.preventDefault();
              return false;
            });

            $('#tracks').on('click', '#previousbutton', function () {
              $.ajax({
                url: previousPageURL,
                headers: {
                  'Authorization': 'Bearer ' + access_token
                },
                success: function(response) {

                  tracksPlaceholder.innerHTML = tracksTemplate(response);
                  nextPageURL = response.next;
                  previousPageURL = response.previous;
                  currentOffset = response.offset;
                  if((response.items!= null) && (response.items.length > 0))
                  {
                  Sortable.create(trackList, {delay:0, handle: ".drag-handle",
                    onEnd: function (/**Event*/evt) {
                      moveItem(currentOffset,evt.oldIndex,evt.newIndex);
                    }
                  });
                }
                }
              });
              event.preventDefault();
              return false;
            });

            $('#tracks').on('click', '#backToPlaylists', function () {
              listPlaylists(userref);
              return false;
            });


            function moveItem(currentOffset, oldPos, newPos) {
              if(+newPos > +oldPos)
              {
                newPos++;
              }
              $.ajax({
                url: selectedPlaylist + "/tracks",
                headers: {
                  'Authorization': 'Bearer ' + access_token
                },
                type: 'PUT',
                data: "{ \"range_start\" : " + (+currentOffset + +oldPos) + ", \"insert_before\" : " + (+currentOffset + +newPos) + " }",
                success: function(response) {

                },
                error: function(xhr) { // if error occured
                  if (xhr.status == 403)
                  {
                    notif({
                      type: "warning",
                      msg: "<b>Forbidden:</b> You don't have permission to edit.",
                      position: "center"
                    });
                  }
                  else {
                    notif({
                      type: "error",
                      msg: "<b>Oops:</b> Something went wrong.",
                      position: "center"
                    });
                  }
                }

              });
            }
          }
        )();
        </script>
        </html>
